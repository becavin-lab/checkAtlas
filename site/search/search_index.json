{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"CheckAtlas CheckAtlas is a one liner tool to check the quality of your single-cell atlases. For every atlas, it produces the quality control tables and figures which can be then processed by multiqc. CheckAtlas is able to load Scanpy, Seurat, and CellRanger files. Summary Parse Scanpy, Seurat and CellRanger objects Fast crawl through your folder and detect Seurat (.rds), Scanpy (.h5ad) or cellranger (.h5) atlas files. Create checkatlas summary files Go through all atlas files and produce summary information: All basic QC (nRNA, nFeature, ratio_mito) General information (nbcells, nbgenes, nblayers) All elements in atlas files (obs, obsm, uns, var, varm) Reductions (pca, umap, tsne) All metrics (clustering, annotation, dimreduction, specificity) Parse checkatlas files in MultiQC Update MultiQC project to add checkatlas parsing. Dev project in: https://github.com/becavin-lab/MultiQC/tree/checkatlas https://checkatlas.readthedocs.io/en/latest/ Examples Evaluate and compare different atlases: https://github.com/becavin-lab/checkatlas/blob/3a4f88e94716c09a3b9c86010f570743a5855461/examples/Atlas_comparison.ipynb https://checkatlas.readthedocs.io/en/stable/CheckAtlas_example_1/CheckAtlas_example_1.html Evaluate different version of your atlas: https://github.com/becavin-lab/checkatlas/blob/3a4f88e94716c09a3b9c86010f570743a5855461/examples/Version_comparison.ipynb https://checkatlas.readthedocs.io/en/stable/CheckAtlas_example_2/CheckAtlas_example_2.html Explore Scanpy, Seurat and CellRanger objects in your folder: https://github.com/becavin-lab/checkatlas/blob/main/examples/AtlasType_comparison.ipynb https://checkatlas.readthedocs.io/en/stable/CheckAtlas_example_3/CheckAtlas_example_3.html Installation CheckAtlas can be downloaded from PyPI. However, the project is in an early development phase. We strongly recommend to use the developmental version. Install checkatlas development version git clone git@github.com:becavin-lab/checkatlas.git pip install checkatlas/. Install MultiQC with checkatlas file management. This version of MultiQC is available at checkatlas branch of github.com:becavin-lab/MultiQC. git clone git@github.com:becavin-lab/MultiQC.git cd MultiQC/ git checkout checkatlas pip install . Install it from PyPI pip install checkatlas Install Seurat To be able to manage seurat file, rpy2 should have Seurat installed. The easiest way is to put all checkatlas requirements in a conda environment and add r-seurat. conda create -n checkatlas python=3.9 pip install checkatlas conda install -c bioconda r-seurat Or, open R in checkatlas environment (the one where you ran 'pip install') and install Seurat. % R > install.packages('Seurat') > library(Seurat) Usage The one liner way to run checkatlas is the following: $ cd your_search_folder/ $ python -m checkatlas . #or $ checkatlas . Or run it inside your python workflow. from checkatlas import checkatlas checkatlas.run(path, atlas_list, multithread, n_cpus)","title":"Home"},{"location":"#checkatlas","text":"CheckAtlas is a one liner tool to check the quality of your single-cell atlases. For every atlas, it produces the quality control tables and figures which can be then processed by multiqc. CheckAtlas is able to load Scanpy, Seurat, and CellRanger files.","title":"CheckAtlas"},{"location":"#summary","text":"","title":"Summary"},{"location":"#parse-scanpy-seurat-and-cellranger-objects","text":"Fast crawl through your folder and detect Seurat (.rds), Scanpy (.h5ad) or cellranger (.h5) atlas files.","title":"Parse Scanpy, Seurat and CellRanger objects"},{"location":"#create-checkatlas-summary-files","text":"Go through all atlas files and produce summary information: All basic QC (nRNA, nFeature, ratio_mito) General information (nbcells, nbgenes, nblayers) All elements in atlas files (obs, obsm, uns, var, varm) Reductions (pca, umap, tsne) All metrics (clustering, annotation, dimreduction, specificity)","title":"Create checkatlas summary files"},{"location":"#parse-checkatlas-files-in-multiqc","text":"Update MultiQC project to add checkatlas parsing. Dev project in: https://github.com/becavin-lab/MultiQC/tree/checkatlas https://checkatlas.readthedocs.io/en/latest/","title":"Parse checkatlas files in MultiQC"},{"location":"#examples","text":"Evaluate and compare different atlases: https://github.com/becavin-lab/checkatlas/blob/3a4f88e94716c09a3b9c86010f570743a5855461/examples/Atlas_comparison.ipynb https://checkatlas.readthedocs.io/en/stable/CheckAtlas_example_1/CheckAtlas_example_1.html Evaluate different version of your atlas: https://github.com/becavin-lab/checkatlas/blob/3a4f88e94716c09a3b9c86010f570743a5855461/examples/Version_comparison.ipynb https://checkatlas.readthedocs.io/en/stable/CheckAtlas_example_2/CheckAtlas_example_2.html Explore Scanpy, Seurat and CellRanger objects in your folder: https://github.com/becavin-lab/checkatlas/blob/main/examples/AtlasType_comparison.ipynb https://checkatlas.readthedocs.io/en/stable/CheckAtlas_example_3/CheckAtlas_example_3.html","title":"Examples"},{"location":"#installation","text":"CheckAtlas can be downloaded from PyPI. However, the project is in an early development phase. We strongly recommend to use the developmental version.","title":"Installation"},{"location":"#install-checkatlas-development-version","text":"git clone git@github.com:becavin-lab/checkatlas.git pip install checkatlas/. Install MultiQC with checkatlas file management. This version of MultiQC is available at checkatlas branch of github.com:becavin-lab/MultiQC. git clone git@github.com:becavin-lab/MultiQC.git cd MultiQC/ git checkout checkatlas pip install .","title":"Install checkatlas development version"},{"location":"#install-it-from-pypi","text":"pip install checkatlas","title":"Install it from PyPI"},{"location":"#install-seurat","text":"To be able to manage seurat file, rpy2 should have Seurat installed. The easiest way is to put all checkatlas requirements in a conda environment and add r-seurat. conda create -n checkatlas python=3.9 pip install checkatlas conda install -c bioconda r-seurat Or, open R in checkatlas environment (the one where you ran 'pip install') and install Seurat. % R > install.packages('Seurat') > library(Seurat)","title":"Install Seurat"},{"location":"#usage","text":"The one liner way to run checkatlas is the following: $ cd your_search_folder/ $ python -m checkatlas . #or $ checkatlas . Or run it inside your python workflow. from checkatlas import checkatlas checkatlas.run(path, atlas_list, multithread, n_cpus)","title":"Usage"},{"location":"contributing/","text":"How to develop on this project CheckAtlas welcomes contributions from the community. You need PYTHON3! This instructions are for linux base systems. (Linux, MacOS, BSD, etc.) Setting up your own fork of this repo. On github interface click on Fork button. Clone your fork of this repo. git clone git@github.com:YOUR_GIT_USERNAME/checkatlas.git Enter the directory cd checkatlas Add upstream repo git remote add upstream https://github.com/becavin-lab/checkatlas Setting up your own virtual environment Run make virtualenv to create a virtual environment. then activate it with source .venv/bin/activate . Install the project in develop mode Run make install to install the project in develop mode. Run the tests to ensure everything is working Run make test to run the tests. Create a new branch to work on your contribution Run git checkout -b my_contribution Make your changes Edit the files using your preferred editor. (we recommend VIM or VSCode) Format the code Run make fmt to format the code. Run the linter Run make lint to run the linter. Test your changes Run make test to run the tests. Ensure code coverage report shows 100% coverage, add tests to your PR. Build the docs locally Run make docs to build the docs. Ensure your new changes are documented. Commit your changes This project uses conventional git commit messages . Example: fix(package): update setup.py arguments \ud83c\udf89 (emojis are fine too) Push your changes to your fork Run git push origin my_contribution Submit a pull request On github interface, click on Pull Request button. Wait CI to run and one of the developers will review your PR. Makefile utilities This project comes with a Makefile that contains a number of useful utility. \u276f make Usage: make <target> Targets: help: ## Show the help. install: ## Install the project in dev mode. fmt: ## Format code using black & isort. lint: ## Run pep8, black, mypy linters. test: lint ## Run tests and generate coverage report. watch: ## Run tests on every change. clean: ## Clean unused files. virtualenv: ## Create a virtual environment. release: ## Create a new tag for release. docs: ## Build the documentation. switch-to-poetry: ## Switch to poetry package manager. init: ## Initialize the project based on an application template. Making a new release This project uses semantic versioning and tags releases with X.Y.Z Every time a new tag is created and pushed to the remote repo, github actions will automatically create a new release on github and trigger a release on PyPI. For this to work you need to setup a secret called PIPY_API_TOKEN on the project settings>secrets, this token can be generated on pypi.org . To trigger a new release all you need to do is. If you have changes to add to the repo Make your changes following the steps described above. Commit your changes following the conventional git commit messages . Run the tests to ensure everything is working. Run make release to create a new tag and push it to the remote repo. the make release will ask you the version number to create the tag, ex: type 0.1.1 when you are asked. CAUTION : The make release will change local changelog files and commit all the unstaged changes you have.","title":"Contributing"},{"location":"contributing/#how-to-develop-on-this-project","text":"CheckAtlas welcomes contributions from the community. You need PYTHON3! This instructions are for linux base systems. (Linux, MacOS, BSD, etc.)","title":"How to develop on this project"},{"location":"contributing/#setting-up-your-own-fork-of-this-repo","text":"On github interface click on Fork button. Clone your fork of this repo. git clone git@github.com:YOUR_GIT_USERNAME/checkatlas.git Enter the directory cd checkatlas Add upstream repo git remote add upstream https://github.com/becavin-lab/checkatlas","title":"Setting up your own fork of this repo."},{"location":"contributing/#setting-up-your-own-virtual-environment","text":"Run make virtualenv to create a virtual environment. then activate it with source .venv/bin/activate .","title":"Setting up your own virtual environment"},{"location":"contributing/#install-the-project-in-develop-mode","text":"Run make install to install the project in develop mode.","title":"Install the project in develop mode"},{"location":"contributing/#run-the-tests-to-ensure-everything-is-working","text":"Run make test to run the tests.","title":"Run the tests to ensure everything is working"},{"location":"contributing/#create-a-new-branch-to-work-on-your-contribution","text":"Run git checkout -b my_contribution","title":"Create a new branch to work on your contribution"},{"location":"contributing/#make-your-changes","text":"Edit the files using your preferred editor. (we recommend VIM or VSCode)","title":"Make your changes"},{"location":"contributing/#format-the-code","text":"Run make fmt to format the code.","title":"Format the code"},{"location":"contributing/#run-the-linter","text":"Run make lint to run the linter.","title":"Run the linter"},{"location":"contributing/#test-your-changes","text":"Run make test to run the tests. Ensure code coverage report shows 100% coverage, add tests to your PR.","title":"Test your changes"},{"location":"contributing/#build-the-docs-locally","text":"Run make docs to build the docs. Ensure your new changes are documented.","title":"Build the docs locally"},{"location":"contributing/#commit-your-changes","text":"This project uses conventional git commit messages . Example: fix(package): update setup.py arguments \ud83c\udf89 (emojis are fine too)","title":"Commit your changes"},{"location":"contributing/#push-your-changes-to-your-fork","text":"Run git push origin my_contribution","title":"Push your changes to your fork"},{"location":"contributing/#submit-a-pull-request","text":"On github interface, click on Pull Request button. Wait CI to run and one of the developers will review your PR.","title":"Submit a pull request"},{"location":"contributing/#makefile-utilities","text":"This project comes with a Makefile that contains a number of useful utility. \u276f make Usage: make <target> Targets: help: ## Show the help. install: ## Install the project in dev mode. fmt: ## Format code using black & isort. lint: ## Run pep8, black, mypy linters. test: lint ## Run tests and generate coverage report. watch: ## Run tests on every change. clean: ## Clean unused files. virtualenv: ## Create a virtual environment. release: ## Create a new tag for release. docs: ## Build the documentation. switch-to-poetry: ## Switch to poetry package manager. init: ## Initialize the project based on an application template.","title":"Makefile utilities"},{"location":"contributing/#making-a-new-release","text":"This project uses semantic versioning and tags releases with X.Y.Z Every time a new tag is created and pushed to the remote repo, github actions will automatically create a new release on github and trigger a release on PyPI. For this to work you need to setup a secret called PIPY_API_TOKEN on the project settings>secrets, this token can be generated on pypi.org . To trigger a new release all you need to do is. If you have changes to add to the repo Make your changes following the steps described above. Commit your changes following the conventional git commit messages . Run the tests to ensure everything is working. Run make release to create a new tag and push it to the remote repo. the make release will ask you the version number to create the tag, ex: type 0.1.1 when you are asked. CAUTION : The make release will change local changelog files and commit all the unstaged changes you have.","title":"Making a new release"},{"location":"examples/","text":"Examples Example 1 Evaluate and compare different atlases: Example 1 Example 2 Evaluate different version of your atlas: Example 2 Example 3 Explore Scanpy, Seurat and CellRanger objects in your folder: Example 3","title":"Examples"},{"location":"examples/#example-1","text":"Evaluate and compare different atlases: Example 1","title":"Example 1"},{"location":"examples/#example-2","text":"Evaluate different version of your atlas: Example 2","title":"Example 2"},{"location":"examples/#example-3","text":"Explore Scanpy, Seurat and CellRanger objects in your folder: Example 3","title":"Example 3"}]}